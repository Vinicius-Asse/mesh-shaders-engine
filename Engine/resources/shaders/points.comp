#!compute shader
#version 450
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#include ".include/noise.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Points { vec4 PositionValue[]; };

float remap(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
    return toLow + (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow);
}

void main()
{
    uint gidX = gl_GlobalInvocationID.x;
    uint gidY = gl_GlobalInvocationID.y;
    uint gidZ = gl_GlobalInvocationID.z;

    uint currPos = gidX + (gl_NumWorkGroups.y * gidY) + (gl_NumWorkGroups.y * gl_NumWorkGroups.z * gidZ);

    float x = remap(gidX, 0, gl_NumWorkGroups.x - 1, -5.0, 5.0);
    float y = remap(gidY, 0, gl_NumWorkGroups.y - 1, -5.0, 5.0);
    float z = remap(gidZ, 0, gl_NumWorkGroups.z - 1, -5.0, 5.0);

    float value = snoise(vec3(x/4, y/4, z/4)) * 8.0f;

    PositionValue[currPos] = vec4(x, y, z, value);
}